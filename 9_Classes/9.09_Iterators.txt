By now you have probably noticed that most container objects can be looped over using a for statement:

到目前为止，您可能已经注意到大多数容器对象都可以使用for语句循环：

for element in [1, 2, 3]:
    print element
for element in (1, 2, 3):
    print element
for key in {'one':1, 'two':2}:
    print key
for char in "123":
    print char
for line in open("myfile.txt"):
    print line,
This style of access is clear, concise, and convenient. The use of iterators pervades and unifies Python. Behind the scenes, the for statement calls iter() on the container object. The function returns an iterator object that defines the method next() which accesses elements in the container one at a time. When there are no more elements, next() raises a StopIteration exception which tells the for loop to terminate. This example shows how it all works:

这种访问方式清晰，简洁，方便。迭代器的使用遍及并统一了Python。在幕后，for语句在容器对象上调用iter()。该函数返回一个迭代器对象，该对象定义方法next()，该方法一次访问容器中的元素。当没有更多元素时，next()引发一个StopIteration异常，告诉for循环终止。此示例显示了它的工作原理：

>>> s = 'abc'
>>> it = iter(s)
>>> it
<iterator object at 0x00A1DB50>
>>> it.next()
'a'
>>> it.next()
'b'
>>> it.next()
'c'
>>> it.next()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
    it.next()
StopIteration
Having seen the mechanics behind the iterator protocol, it is easy to add iterator behavior to your classes. Define an __iter__() method which returns an object with a next() method. If the class defines next(), then __iter__() can just return self:

看过迭代器协议背后的机制，很容易将迭代器行为添加到类中。定义__iter __()方法，该方法返回带有next()方法的对象。如果类定义了next()，则__iter __()只能返回self：

class Reverse:
    """Iterator for looping over a sequence backwards."""
    def __init__(self, data):
        self.data = data
        self.index = len(data)

    def __iter__(self):
        return self

    def next(self):
        if self.index == 0:
            raise StopIteration
        self.index = self.index - 1
        return self.data[self.index]
>>> rev = Reverse('spam')
>>> iter(rev)
<__main__.Reverse object at 0x00A1DB50>
>>> for char in rev:
...     print char
...
m
a
p
s