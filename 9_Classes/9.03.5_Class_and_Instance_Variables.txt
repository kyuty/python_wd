Generally speaking, instance variables are for data unique to each instance and class variables are for attributes and methods shared by all instances of the class:

>>> class Dog:
... 
...     kind = 'canine'         # class variable shared by all instances
... 
...     def __init__(self, name):
...         self.name = name    # instance variable unique to each instance
... 
>>> d = Dog('Fido')
>>> e = Dog('Buddy')
>>> d.kind                  # shared by all dogs
'canine'
>>> e.kind                  # shared by all dogs
'canine'
>>> d.name                  # unique to d
'Fido'
>>> e.name                  # unique to e
'Buddy'
>>> d.kind = 'changed'
>>> d.kind
'changed'
>>> e.kind
'canine'

As discussed in A Word About Names and Objects, shared data can have possibly surprising effects with involving mutable objects such as lists and dictionaries. For example, the tricks list in the following code should not be used as a class variable because just a single list would be shared by all Dog instances:

# 所有的类实例都共享tricks
>>> class Dog:
... 
...     tricks = []             # mistaken use of a class variable # 错误地使用了一个类变量
... 
...     def __init__(self, name):
...         self.name = name
... 
...     def add_trick(self, trick):
...         self.tricks.append(trick)
... 
>>> d = Dog('Fido')
>>> e = Dog('Buddy')
>>> d.add_trick('roll over')
>>> e.add_trick('play dead')
>>> d.tricks                    # unexpectedly shared by all dogs
['roll over', 'play dead']
>>> e.tricks
['roll over', 'play dead']
>>> d.tricks.append('temp')
>>> d.tricks
['roll over', 'play dead', 'temp']
>>> e.tricks
['roll over', 'play dead', 'temp']

Correct design of the class should use an instance variable instead:

# 单独为每一个类对象创建tricks
>>> class Dog:
... 
...     def __init__(self, name):
...         self.name = name
...         self.tricks = []    # creates a new empty list for each dog
... 
...     def add_trick(self, trick):
...         self.tricks.append(trick)
... 
>>> d = Dog('Fido')
>>> e = Dog('Buddy')
>>> d.add_trick('roll over')
>>> e.add_trick('play dead')
>>> d.tricks
['roll over']
>>> e.tricks
['play dead']