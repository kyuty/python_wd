A namespace is a mapping from names to objects. 

命名空间是从名称到对象的映射。

Most namespaces are currently implemented as Python dictionaries, but that’s normally not noticeable in any way (except for performance), and it may change in the future. 

大多数名称空间当前都是作为Python词典实现的，但通常不会以任何方式显示（性能除外），并且它可能在将来发生变化。

Examples of namespaces are: 
the set of built-in names (containing functions such as abs(), and built-in exception names);
the global names in a module; 
and the local names in a function invocation. 

名称空间的示例如下：
内置名称集（包含abs（）等函数和内置异常名称）;
模块中的全局名称;
和函数调用中的本地名称。

In a sense the set of attributes of an object also form a namespace. 

在某种意义上，对象的属性集也形成了命名空间。

The important thing to know about namespaces is that there is absolutely no relation between names in different namespaces; for instance, two different modules may both define a function maximize without confusion — users of the modules must prefix it with the module name.

关于命名空间的重要一点是，不同命名空间中的名称之间绝对没有关系;例如，两个不同的模块都可以定义函数最大化而不会混淆 - 模块的用户必须在其前面加上模块名称。

By the way, I use the word attribute for any name following a dot — for example, in the expression z.real, real is an attribute of the object z. Strictly speaking, references to names in modules are attribute references: in the expression modname.funcname, modname is a module object and funcname is an attribute of it. In this case there happens to be a straightforward mapping between the module’s attributes and the global names defined in the module: they share the same namespace! [1]

顺便说一句，我对word后面的任何名称都使用了word属性 - 例如，在表达式z.real中，real是对象z的一个属性。 严格地说，模块中名称的引用是属性引用：在表达式modname.funcname中，modname是模块对象，funcname是它的属性。 在这种情况下，模块的属性和模块中定义的全局名称之间恰好有一个直接的映射：它们共享相同的命名空间！[1]

[1]	Except for one thing. Module objects have a secret read-only attribute called __dict__ which returns the dictionary used to implement the module’s namespace; the name __dict__ is an attribute but not a global name. Obviously, using this violates the abstraction of namespace implementation, and should be restricted to things like post-mortem debuggers.

[1]除了一件事。 模块对象有一个名为__dict__的秘密只读属性，它返回用于实现模块命名空间的字典; 名称__dict__是属性，但不是全局名称。 显然，使用它违反了命名空间实现的抽象，并且应该仅限于事后调试器之类的东西。

Attributes may be read-only or writable. In the latter case, assignment to attributes is possible. Module attributes are writable: you can write modname.the_answer = 42. Writable attributes may also be deleted with the del statement. For example, del modname.the_answer will remove the attribute the_answer from the object named by modname.

属性可以是只读的或可写的。 在后一种情况下，可以分配属性。 模块属性是可写的：您可以编写modname.the_answer = 42.也可以使用del语句删除可写属性。 例如，del modname.the_answer将从modname指定的对象中删除属性the_answer。

Namespaces are created at different moments and have different lifetimes. The namespace containing the built-in names is created when the Python interpreter starts up, and is never deleted. The global namespace for a module is created when the module definition is read in; normally, module namespaces also last until the interpreter quits. The statements executed by the top-level invocation of the interpreter, either read from a script file or interactively, are considered part of a module called __main__, so they have their own global namespace. (The built-in names actually also live in a module; this is called __builtin__.)

命名空间在不同时刻创建，具有不同的生命周期。 包含内置名称的命名空间是在Python解释器启动时创建的，并且永远不会被删除。 读入模块定义时会创建模块的全局命名空间; 通常，模块命名空间也会持续到解释器退出。 由脚本文件读取或交互式地从解释器的顶级调用执行的语句被认为是名为__main__的模块的一部分，因此它们具有自己的全局命名空间。 （内置名称实际上也存在于模块中;这称为__builtin__。）

The local namespace for a function is created when the function is called, and deleted when the function returns or raises an exception that is not handled within the function. (Actually, forgetting would be a better way to describe what actually happens.) Of course, recursive invocations each have their own local namespace.

函数的本地命名空间在调用函数时创建，并在函数返回或引发函数内未处理的异常时删除。 （实际上，遗忘是描述实际情况的更好方法。）当然，递归调用每个都有自己的本地命名空间。

A scope is a textual region of a Python program where a namespace is directly accessible. “Directly accessible” here means that an unqualified reference to a name attempts to find the name in the namespace.

范围是Python程序的文本区域，可直接访问命名空间。这里的“可直接访问”意味着对名称的非限定引用会尝试在命名空间中查找名称。

Although scopes are determined statically, they are used dynamically. At any time during execution, there are at least three nested scopes whose namespaces are directly accessible:

尽管范围是静态确定的，但它们是动态使用的。在执行期间的任何时候，至少有三个嵌套的作用域，其名称空间可以直接访问：

the innermost scope, which is searched first, contains the local names
the scopes of any enclosing functions, which are searched starting with the nearest enclosing scope, contains non-local, but also non-global names
the next-to-last scope contains the current module’s global names
the outermost scope (searched last) is the namespace containing built-in names

最先搜索的最内部范围包含本地名称
从最近的封闭范围开始搜索的任何封闭函数的范围包含非本地名称，也包括非全局名称
倒数第二个范围包含当前模块的全局名称
最外面的范围（最后搜索）是包含内置名称的命名空间

If a name is declared global, then all references and assignments go directly to the middle scope containing the module’s global names. Otherwise, all variables found outside of the innermost scope are read-only (an attempt to write to such a variable will simply create a new local variable in the innermost scope, leaving the identically named outer variable unchanged).

如果名称声明为全局，则所有引用和赋值将直接转到包含模块全局名称的中间作用域。否则，在最内层范围之外找到的所有变量都是只读的（尝试写入这样的变量只会在最里面的范围内创建一个新的局部变量，而保持同名的外部变量不变）。

Usually, the local scope references the local names of the (textually) current function. Outside functions, the local scope references the same namespace as the global scope: the module’s namespace. Class definitions place yet another namespace in the local scope.

通常，本地范围引用（文本）当前函数的本地名称。在外部函数中，本地作用域引用与全局作用域相同的名称空间：模块的名称空间。类定义在本地范围中放置另一个命名空间。

It is important to realize that scopes are determined textually: the global scope of a function defined in a module is that module’s namespace, no matter from where or by what alias the function is called. On the other hand, the actual search for names is done dynamically, at run time — however, the language definition is evolving towards static name resolution, at “compile” time, so don’t rely on dynamic name resolution! (In fact, local variables are already determined statically.)

重要的是要意识到范围是以文本方式确定的：模块中定义的函数的全局范围是模块的命名空间，无论从何处或通过调用函数的别名。另一方面，名称的实际搜索是在运行时动态完成的 - 但是，语言定义在“编译”时朝着静态名称解析发展，所以不要依赖于动态名称解析！ （事实上​​，局部变量已经静态确定。）

A special quirk of Python is that – if no global statement is in effect – assignments to names always go into the innermost scope. Assignments do not copy data — they just bind names to objects. The same is true for deletions: the statement del x removes the binding of x from the namespace referenced by the local scope. In fact, all operations that introduce new names use the local scope: in particular, import statements and function definitions bind the module or function name in the local scope. (The global statement can be used to indicate that particular variables live in the global scope

Python的一个特殊之处在于 - 如果没有全局语句生效 - 对名称的赋值总是进入最内层范围。分配不复制数据 - 它们只是将名称绑定到对象。删除也是如此：语句del x删除了x与本地范围引用的命名空间的绑定。实际上，引入新名称的所有操作都使用本地范围：特别是，import语句和函数定义绑定本地范围中的模块或函数名称。 （全局语句可用于指示特定变量存在于全局范围内。）