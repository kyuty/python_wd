Sometimes it is useful to have a data type similar to the Pascal “record” or C “struct”, bundling together a few named data items. An empty class definition will do nicely:

有时，使用类似于Pascal“record”或C“struct”的数据类型是有用的，将一些命名数据项捆绑在一起。 一个空的类定义可以很好地完成：

class Employee:
    pass

john = Employee()  # Create an empty employee record

# Fill the fields of the record ＃填写记录的字段
john.name = 'John Doe'
john.dept = 'computer lab'
john.salary = 1000

A piece of Python code that expects a particular abstract data type can often be passed a class that emulates the methods of that data type instead. For instance, if you have a function that formats some data from a file object, you can define a class with methods read() and readline() that get the data from a string buffer instead, and pass it as an argument.

需要特定抽象数据类型的Python代码通常可以传递一个模拟该数据类型方法的类。 例如，如果您有一个从文件对象格式化某些数据的函数，则可以使用read()和readline()方法定义一个类，该方法从字符串缓冲区获取数据，并将其作为参数传递。

Instance method objects have attributes, too: m.im_self is the instance object with the method m(), and m.im_func is the function object corresponding to the method.

实例方法对象也有属性：m.im_self是方法m()的实例对象，m.im_func是与方法对应的函数对象。