The string module includes a versatile Template class with a simplified syntax suitable for editing by end-users. This allows users to customize their applications without having to alter the application.

字符串模块包括一个通用的Template类，其语法简化，适合最终用户编辑。这允许用户自定义他们的应用程序而无需更改应用程序。

The format uses placeholder names formed by $ with valid Python identifiers (alphanumeric characters and underscores). Surrounding the placeholder with braces allows it to be followed by more alphanumeric letters with no intervening spaces. Writing $$ creates a single escaped $:

该格式使用由$形成的占位符名称和有效的Python标识符（字母数字字符和下划线）。使用大括号围绕占位符允许其后跟更多的字母数字字母，没有中间空格。写入$$会创建一个转义$：

# Template.substitute函数
>>> from string import Template
>>> t = Template('${village}folk send $$10 to $cause.')
>>> t.substitute(village='Nottingham', cause='the ditch fund')
'Nottinghamfolk send $10 to the ditch fund.'

The substitute() method raises a KeyError when a placeholder is not supplied in a dictionary or a keyword argument. For mail-merge style applications, user supplied data may be incomplete and the safe_substitute() method may be more appropriate — it will leave placeholders unchanged if data is missing:

当在字典或关键字参数中未提供占位符时，substitute()方法会引发KeyError。对于邮件合并样式应用程序，用户提供的数据可能不完整，而safe_substitute()方法可能更合适 - 如果数据丢失，它将保持占位符不变：

# Template.safe_substitute函数
>>> t = Template('Return the $item to $owner.')
>>> d = dict(item='unladen swallow')
>>> t.substitute(d)
Traceback (most recent call last):
  ...
KeyError: 'owner'
>>> t.safe_substitute(d)
'Return the unladen swallow to $owner.'

Template subclasses can specify a custom delimiter. For example, a batch renaming utility for a photo browser may elect to use percent signs for placeholders such as the current date, image sequence number, or file format:

模板子类可以指定自定义分隔符。例如，照片浏览器的批量重命名实用程序可以选择对占位符使用百分号，例如当前日期，图像序列号或文件格式：

# 批量改名
>>> import time, os.path
>>> from string import Template
>>> photofiles = ['img_1074.jpg', 'img_1076.jpg', 'img_1077.jpg']
>>> class BatchRename(Template):
...     delimiter = '%'            # 自定义分隔符
...
>>> fmt = raw_input('Enter rename style (%d-date %n-seqnum %f-format):  ')
Enter rename style (%d-date %n-seqnum %f-format):  Ashley_%n%f
>>> t = BatchRename(fmt)
>>> date = time.strftime('%d%b%y')
>>> for i, filename in enumerate(photofiles):
...     base, ext = os.path.splitext(filename)             # os.path.splitext函数
...     newname = t.substitute(d=date, n=i, f=ext)         # Template.substitute函数  (这里没看懂，d=date，date是当前日期，为什么最后打印出来的Ashley_)
...     print '{0} --> {1}'.format(filename, newname)
...
img_1074.jpg --> Ashley_0.jpg
img_1076.jpg --> Ashley_1.jpg
img_1077.jpg --> Ashley_2.jpg

Another application for templating is separating program logic from the details of multiple output formats. This makes it possible to substitute custom templates for XML files, plain text reports, and HTML web reports.

模板的另一个应用是将程序逻辑与多种输出格式的细节分开。这样就可以替换XML文件，纯文本报告和HTML Web报告的自定义模板。