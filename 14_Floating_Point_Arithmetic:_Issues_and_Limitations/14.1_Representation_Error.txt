This section explains the “0.1” example in detail, and shows how you can perform an exact analysis of cases like this yourself. Basic familiarity with binary floating-point representation is assumed.

本节详细介绍“0.1”示例，并说明如何自行对此类案例进行精确分析。假设基本熟悉二进制浮点表示。

Representation error refers to the fact that some (most, actually) decimal fractions cannot be represented exactly as binary (base 2) fractions. This is the chief reason why Python (or Perl, C, C++, Java, Fortran, and many others) often won’t display the exact decimal number you expect:

表示错误是指某些（大多数，实际上）小数部分不能完全表示为二进制（基数2）分数的事实。这是Python（或Perl，C，C ++，Java，Fortran和许多其他人）经常无法显示您期望的确切十进制数的主要原因：

>>> 0.1 + 0.2
0.30000000000000004

Why is that? 1/10 and 2/10 are not exactly representable as a binary fraction. Almost all machines today (July 2010) use IEEE-754 floating point arithmetic, and almost all platforms map Python floats to IEEE-754 “double precision”. 754 doubles contain 53 bits of precision, so on input the computer strives to convert 0.1 to the closest fraction it can of the form J/2**N where J is an integer containing exactly 53 bits. Rewriting

这是为什么？ 1/10和2/10不能完全表示为二进制分数。今天（2010年7月）几乎所有机器都使用IEEE-754浮点运算，几乎所有平台都将Python浮点数映射到IEEE-754“双精度”。 754双精度包含53位精度，因此在输入时，计算机努力将0.1转换为J / 2 ** N形式的最接近的分数，其中J是包含正好53位的整数。重写

1 / 10 ~= J / (2**N)

as

J ~= 2**N / 10

and recalling that J has exactly 53 bits (is >= 2**52 but < 2**53), the best value for N is 56:

并且回想起J恰好有53位（> = 2 ** 52但是<2 ** 53），N的最佳值是56：

>>> 2**52
4503599627370496
>>> 2**53
9007199254740992
>>> 2**56/10
7205759403792793

That is, 56 is the only value for N that leaves J with exactly 53 bits. The best possible value for J is then that quotient rounded:

也就是说，56是N的唯一值，它使J正好为53位。然后，J的最佳可能值是舍入的商：

>>> q, r = divmod(2**56, 10)
>>> r
6

Since the remainder is more than half of 10, the best approximation is obtained by rounding up:

由于余数超过10的一半，因此通过四舍五入获得最佳近似值：

>>> q+1
7205759403792794

Therefore the best possible approximation to 1/10 in 754 double precision is that over 2**56, or

因此，754双精度的最佳可能近似为1/10，超过2 ** 56，或

7205759403792794 / 72057594037927936

Note that since we rounded up, this is actually a little bit larger than 1/10; if we had not rounded up, the quotient would have been a little bit smaller than 1/10. But in no case can it be exactly 1/10!

请注意，由于我们向上舍入，这实际上比1/10大一点;如果我们没有四舍五入，则商数将小于1/10。但在任何情况下都不能完全是1/10！

So the computer never “sees” 1/10: what it sees is the exact fraction given above, the best 754 double approximation it can get:

所以计算机永远不会“看到”1/10：它看到的是上面给出的精确分数，它可以获得的最佳754双近似值：

>>> .1 * 2**56
7205759403792794.0

If we multiply that fraction by 10**30, we can see the (truncated) value of its 30 most significant decimal digits:

如果我们将该分数乘以10 ** 30，我们可以看到其30个最重要的十进制数字的（截断的）值：

>>> 7205759403792794 * 10**30 // 2**56
100000000000000005551115123125L

meaning that the exact number stored in the computer is approximately equal to the decimal value 0.100000000000000005551115123125. In versions prior to Python 2.7 and Python 3.1, Python rounded this value to 17 significant digits, giving ‘0.10000000000000001’. In current versions, Python displays a value based on the shortest decimal fraction that rounds correctly back to the true binary value, resulting simply in ‘0.1’.

意味着存储在计算机中的确切数字大约等于十进制值0.100000000000000005551115123125。在Python 2.7和Python 3.1之前的版本中，Python将此值四舍五入为17位有效数字，给出“0.10000000000000001”。在当前版本中，Python显示一个基于最小小数的值，该小数正确地回滚到真正的二进制值，结果只是'0.1'。