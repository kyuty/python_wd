# % 同样可以被用于string format
>>> import math
>>> print 'The value of PI is approximately %5.3f.' % math.pi
The value of PI is approximately 3.142.
>>> print 'The value of PI is approximately %6.3f.' % math.pi   # d前面变成6.3，注意打印的区别
The value of PI is approximately  3.142.

常见的占位符
%d    整数
%f    浮点数
%s    字符串
%x    十六进制整数

>>> 'Hi, %s, you have $%d.' % ('Michael', 1000000) # 语句的末尾加上 %（） 括号里面直接填写内容即可。
                                                   # 字符串加引号，中间用逗号分隔
'Hi, Michael, you have $1000000.'
>>> 'Hello, %s' % 'world'                          # 如果只有一个参数，括号可以省略 
'Hello, world'

格式化整数指定是否补零：
# 可以看得出来，d前面的数字用来指定占位符，
# 表示被格式化的数值占用的位置数量（字节还是什么不知道这样的表述是否正确），
# 指定之后比如%3d，代表这个整数要占用3个位置，前面如果有0代表占用的地方使用0补齐，没有就使用空格补齐。
# 指定的空间位置小于实际的数字大小，以实际占用的位置大小为准。
>>> '%d-%d' % (3, 23)
'3-23'
>>> '%2d-%2d' % (3, 23)    # 3占了两位
' 3-23'
>>> '%3d-%3d' % (3, 23)    # 3占了3位，23占了3位
'  3- 23'
>>> '%4d-%4d' % (3, 23)
'   3-  23'
>>> '%01d-%01d' % (3, 23)  # 最少占1位，不够补0
'3-23'
>>> '%02d-%02d' % (3, 23)  # 最少占2位，不够补0
'03-23'
>>> '%03d-%03d' % (3, 23)  # 最少占3位，不够补0
'003-023'
>>> '%04d-%04d' % (3, 23)  # 最少占4位，不够补0
'0003-0023'

指定小数的位数：
>>> '%.f' % 3.1415926
'3'
>>> '%.1f' % 3.1415926
'3.1'
>>> '%.2f' % 3.1415926
'3.14'
>>> '%.3f' % 3.1415926
'3.142'
# 可以看出.后面的数字用来表示保留的小数点的位数，".1"代表保留小数点后面一位小数

# 如果不确定应该用什么，%s永远起作用，它会把任何数据类型转换为字符串：
>>> 'Age: %s. Gender: %s' % (25, True)
'Age: 25. Gender: True'

# 转义，用%%来表示一个%
>>> 'growth rate: %d %%' % 7
'growth rate: 7 %'