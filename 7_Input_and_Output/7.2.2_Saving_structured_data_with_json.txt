Strings can easily be written to and read from a file. Numbers take a bit more effort, since the read() method only returns strings, which will have to be passed to a function like int(), which takes a string like '123' and returns its numeric value 123. When you want to save more complex data types like nested lists and dictionaries, parsing and serializing by hand becomes complicated.

Rather than having users constantly writing and debugging code to save complicated data types to files, Python allows you to use the popular data interchange format called JSON (JavaScript Object Notation). The standard module called json can take Python data hierarchies, and convert them to string representations; this process is called serializing. Reconstructing the data from the string representation is called deserializing. Between serializing and deserializing, the string representing the object may have been stored in a file or data, or sent over a network connection to some distant machine.

Note The JSON format is commonly used by modern applications to allow for data exchange. Many programmers are already familiar with it, which makes it a good choice for interoperability.


由于read方法只返回字符串，所以字符串'123'转成数字会比较麻烦
如果想要保存更为复杂的数据类型，如嵌套列表和dict，手动解析和序列化会比较麻烦

JSON = JavaScript Object Notation

其他数据结构 转为 字符串的过程，叫序列化
字符串 转为 其他数据结构的过程，叫反序列化


>>> import json
>>> json.dumps([1, 'simple', 'list'])
'[1, "simple", "list"]'

# coding x to file
# 向f文件写入x
json.dump(x, f)

# decode from file
# 从f文件读取值到x
x = json.load(f)