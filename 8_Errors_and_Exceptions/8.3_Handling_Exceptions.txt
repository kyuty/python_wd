# 处理异常 try except
>>> while True:
...     try:
...         x = int(raw_input("Please enter a number: "))
...         break
...     except ValueError:
...         print "Oops!  That was no valid number.  Try again..."
...

# 多个异常 except
... except (RuntimeError, TypeError, NameError):
...     pass


# except as用法
# except.errno变量
# except.strerror变量
# sys.exc_info()[0]变量
>>> import sys
... 
... try:
...     f = open('myfile.txt')
...     s = f.readline()
...     i = int(s.strip())
... except IOError as e:
...     print "I/O error({0}): {1}".format(e.errno, e.strerror)
... except ValueError:
...     print "Could not convert data to an integer."
... except:
...     print "Unexpected error:", sys.exc_info()[0]
...     raise

# try except else用法
# sys.argv
>>> for arg in sys.argv[1:]:
...     try:
...         f = open(arg, 'r')
...     except IOError:
...         print 'cannot open', arg
...     else:
...         print arg, 'has', len(f.readlines()), 'lines'
...         f.close()

# 异常参数，except.args
# except实例定义了__str__()，因此可以直接打印参数而无需引用args
# type函数
>>> try:
...     raise Exception('spam', 'eggs')
... except Exception as inst:
...     print type(inst)     # the exception instance
...     print inst.args      # arguments stored in .args
...     print inst           # __str__ allows args to be printed directly
...     x, y = inst.args
...     print 'x =', x
...     print 'y =', y
...
<type 'exceptions.Exception'>
('spam', 'eggs')
('spam', 'eggs')
x = spam
y = eggs

# 异常处理也可以发生在try子句中调用的函数内部
>>> def this_fails():
...     x = 1/0
...
>>> try:
...     this_fails()
... except ZeroDivisionError as detail:
...     print 'Handling run-time error:', detail
...
Handling run-time error: integer division or modulo by zero