Some Python users develop a deep interest in knowing the relative performance of different approaches to the same problem. Python provides a measurement tool that answers those questions immediately.

一些Python用户对了解同一问题的不同方法的相对性能产生了浓厚的兴趣。 Python提供了一种可以立即回答这些问题的测量工具。

For example, it may be tempting to use the tuple packing and unpacking feature instead of the traditional approach to swapping arguments. The timeit module quickly demonstrates a modest performance advantage:

例如，使用元组打包和解包功能而不是传统方法来交换参数可能很诱人。 timeit模块可以快速展示出适度的性能优势：

# 互换a和b的值
# 两种实现方式，通过Timer().timeit()来测量出哪一个更快
>>> from timeit import Timer
>>> Timer('t=a; a=b; b=t', 'a=1; b=2').timeit()
0.57535828626024577
>>> Timer('a,b = b,a', 'a=1; b=2').timeit()
0.54962537085770791

In contrast to timeit’s fine level of granularity, the profile and pstats modules provide tools for identifying time critical sections in larger blocks of code.

与timeit的精细粒度级别相比，profile和pstats模块提供了用于在更大的代码块中识别时间关键部分的工具。